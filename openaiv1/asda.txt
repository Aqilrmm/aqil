openaiv1/
├── ai/
│   ├── assistant.py
│   ├── main.py
│   ├── characters/
│   │   └── character_config.py
│   ├── functions/
|   |   └── __init__.py
│   ├── memory/
│   │   └── conversation_memory.py
|   |   └── customer_profile.py
│   └── utils/
│       └── debug_logger.py
├── chat_memory/
│   └── aqil123.json   ← contoh file memory per user
├── user_profile/
    └── aqil123.json   ← contoh file profile per user

ai/assistant.py
import os
import json
from openai import OpenAI
from dotenv import load_dotenv

from .characters.character_config import AI_CHARACTERS
from .functions import AVAILABLE_FUNCTIONS
from .memory.conversation_memory import ConversationMemory
from .utils.debug_logger import debug_log


load_dotenv()

class AIAssistant:
    def __init__(self, character="teacher", debug=False, chat_id="default"):
        self.client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.character = AI_CHARACTERS.get(character, AI_CHARACTERS["teacher"])
        self.memory = ConversationMemory(chat_id)
        self.debug = debug

    def get_response(self, user_input):
        self.memory.add("user", user_input)
        messages = self.memory.get(self.character["system_prompt"])
        debug_log(self.debug, f"Messages: {messages}")

        response = self.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            functions=[f["spec"] for f in AVAILABLE_FUNCTIONS.values()],
            function_call="auto",
            temperature=0.7
        ).choices[0].message

        debug_log(self.debug, f"API Response: {response}")

        if response.function_call:
            fn_name = response.function_call.name
            fn_args = json.loads(response.function_call.arguments)
            func = AVAILABLE_FUNCTIONS.get(fn_name)
            if func:
                result = func["func"](**fn_args)
                self.memory.add("function", str(result), name=fn_name)  # Pass function name here
                debug_log(self.debug, f"Function result: {result}")

                followup = self.client.chat.completions.create(
                    model="gpt-4o-mini",
                    messages=messages + [{
                        "role": "function",
                        "name": fn_name,
                        "content": str(result)
                    }],
                    temperature=0.7
                ).choices[0].message
                self.memory.add("assistant", followup.content)
                return followup.content

        self.memory.add("assistant", response.content)
        return response.content

ai/main.py
from .assistant import AIAssistant
from .characters.character_config import AI_CHARACTERS

def main():
    char = input("Pilih karakter (poet/teacher/philosopher): ").strip().lower()
    if char not in AI_CHARACTERS:
        char = "teacher"

    chat_id = input("Masukkan chat ID (misal: aqil123): ").strip()
    if not chat_id:
        chat_id = "default"

    debug = input("Aktifkan debug mode? (y/n): ").lower() == 'y'
    assistant = AIAssistant(char, debug=debug, chat_id=chat_id)

    print(f"\nBerbicara dengan {AI_CHARACTERS[char]['name']}.\nKetik 'quit' untuk keluar.")
    while True:
        user_input = input("\nAnda: ").strip()
        if user_input.lower() == "quit":
            break
        print(f"\nAssistant: {assistant.get_response(user_input)}")

if __name__ == "__main__":
    main()
